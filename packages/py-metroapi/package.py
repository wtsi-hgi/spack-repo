# Copyright 2013-2023 Lawrence Livermore National Security, LLC and other
# Spack Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (Apache-2.0 OR MIT)

from spack.package import *
import os

class PyMetroapi(PythonPackage):
    # Metro: A batteries-included web framework for the fastest development experience.
    homepage = "https://github.com/ricardo-agz/metro"
    pypi = "metroapi/metroapi-0.0.12.tar.gz"
    import_modules = ["metro"]

    # Variants for extras
    variant("conductor", default=False, description="Enable conductor extra")


    version("0.0.12", sha256="57154699b9578c5683f17917ce8bd08dfd5fbf27f6c325bbe181ca7fad77e6fb")

    # Rely on uv to manage and install all dependencies from PyPI
    depends_on("py-uv", type=("build", "run"))

    def install(self, spec, prefix):
        extras = []
        if "+conductor" in spec:
            extras.append("conductor")
        extras_suffix = f"[{','.join(extras)}]" if extras else ""
        pkg_spec = f"metroapi{extras_suffix}=={self.version}"

        # Always invoke uv from the py-uv dependency
        python_exe = self.spec["python"].command.path if "python" in self.spec else None
        uv_path = join_path(self.spec["py-uv"].prefix.bin, "uv")
        uv_exe = Executable(uv_path)
        env = os.environ.copy()
        if python_exe:
            env["UV_PYTHON"] = python_exe
        uv_exe("pip", "install", pkg_spec, f"--prefix={prefix}", env=env)


    @run_after("install")
    def install_test(self):
        with working_dir("spack-test", create=True):
            python("-c", 'import metro')

    # Generated by py-package-creator on 2025-08-11T16:09:36Z
    # To reproduce install locally: spack install py-metroapi
    # package=metroapi
    # selected_version=0.0.12
    # artifact=metroapi-0.0.12.tar.gz
    # wheel_url=https://files.pythonhosted.org/packages/76/15/b77c2877e0d14683ad1cc2d127e2725eab084d1acec774ba6a0213023885/metroapi-0.0.12-py3-none-any.whl
    # regular_deps=17 => py-bcrypt>=3-2-0, py-black~=24-10-0, py-certifi>=2024-12-14, py-click>=8-0-0, py-cryptography>=35-0-0, py-fastapi<1-0-0,>=0-68-0, py-inflect>=5-3-0, py-isort~=5-13-2, py-jinja2>=3-0-0, py-mongoengine<0-30,>=0-29-1, py-pyjwt~=2-10-1, py-pymongo<4-9, py-python-dotenv>=0-19-0, py-python-multipart~=0-0-20, py-python>=3-9, py-uvicorn>=0-15-0, py-websockets>=10-0
    # variant[conductor]=4 => py-anthropic~=0-42-0, py-inquirer>=3-1-3, py-keyring>=24-0-0, py-openai~=1-59-5
    # variant_names=conductor
    # per_version[0.0.12]=16 => py-bcrypt>=3-2-0, py-black~=24-10-0, py-certifi>=2024-12-14, py-click>=8-0-0, py-cryptography>=35-0-0, py-fastapi<1-0-0,>=0-68-0, py-inflect>=5-3-0, py-isort~=5-13-2, py-jinja2>=3-0-0, py-mongoengine<0-30,>=0-29-1, py-pyjwt~=2-10-1, py-pymongo<4-9, py-python-dotenv>=0-19-0, py-python-multipart~=0-0-20, py-uvicorn>=0-15-0, py-websockets>=10-0
    # per_version_variant[0.0.12][conductor]=4 => py-anthropic~=0-42-0, py-inquirer>=3-1-3, py-keyring>=24-0-0, py-openai~=1-59-5
    # recursed=20 => anthropic, bcrypt, black, certifi, click, cryptography, fastapi, inflect, inquirer, isort, jinja2, keyring, mongoengine, openai, pyjwt, pymongo, python-dotenv, python-multipart, uvicorn, websockets
    # pyPIMD_excerpt:
    # Requires-Dist: websockets>=10.0
    # Requires-Dist: bcrypt>=3.2.0
    # Requires-Dist: jinja2>=3.0.0
    # Requires-Dist: pyjwt~=2.10.1
    # Requires-Dist: certifi>=2024.12.14
    # Requires-Dist: python-multipart~=0.0.20
    # Requires-Dist: black~=24.10.0
    # Requires-Dist: isort~=5.13.2
    # Requires-Dist: openai~=1.59.5; extra == "conductor"
    # Requires-Dist: anthropic~=0.42.0; extra == "conductor"
    # Requires-Dist: keyring>=24.0.0; extra == "conductor"
    # Requires-Dist: inquirer>=3.1.3; extra == "conductor"

